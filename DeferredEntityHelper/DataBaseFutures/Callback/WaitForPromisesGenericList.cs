using DeferredEntityHelper.DataBaseFutures;
using DeferredEntityHelper.DataBaseFutures.Callback;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DeferredEntityHelper
{
    //this is tedious but a bit nice to use
    //actually visual studio intellicode handled most of it
    public abstract partial class BaseEntityHelper
    {
        public delegate Task<PotentialFuture<TResult>> WaitForPromiseCallback<TResult, TProp1>(TProp1 arg1)
            where TResult : class where TProp1 : class;
        public delegate Task<PotentialFuture<TResult>> WaitForPromiseCallback<TResult, TProp1, TProp2>(TProp1 arg1, TProp2 arg2)
            where TResult : class where TProp1 : class where TProp2 : class;
        public delegate Task<PotentialFuture<TResult>> WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3>(TProp1 arg1, TProp2 arg2, TProp3 arg3)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class;
        public delegate Task<PotentialFuture<TResult>> WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4>(TProp1 arg1, TProp2 arg2, TProp3 arg3, TProp4 arg4)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class;
        public delegate Task<PotentialFuture<TResult>> WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5>(TProp1 arg1, TProp2 arg2, TProp3 arg3, TProp4 arg4, TProp5 arg5)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class;
        public delegate Task<PotentialFuture<TResult>> WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6>(TProp1 arg1, TProp2 arg2, TProp3 arg3, TProp4 arg4, TProp5 arg5, TProp6 arg6)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class where TProp6 : class;
        public delegate Task<PotentialFuture<TResult>> WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7>(TProp1 arg1, TProp2 arg2, TProp3 arg3, TProp4 arg4, TProp5 arg5, TProp6 arg6, TProp7 arg7)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class where TProp6 : class where TProp7 : class;
        public delegate Task<PotentialFuture<TResult>> WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8>(TProp1 arg1, TProp2 arg2, TProp3 arg3, TProp4 arg4, TProp5 arg5, TProp6 arg6, TProp7 arg7, TProp8 arg8)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class where TProp6 : class where TProp7 : class where TProp8 : class;
        public delegate Task<PotentialFuture<TResult>> WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9>(TProp1 arg1, TProp2 arg2, TProp3 arg3, TProp4 arg4, TProp5 arg5, TProp6 arg6, TProp7 arg7, TProp8 arg8, TProp9 arg9)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class where TProp6 : class where TProp7 : class where TProp8 : class where TProp9 : class;
        public delegate Task<PotentialFuture<TResult>> WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9, TProp10>(TProp1 arg1, TProp2 arg2, TProp3 arg3, TProp4 arg4, TProp5 arg5, TProp6 arg6, TProp7 arg7, TProp8 arg8, TProp9 arg9, TProp10 arg10)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class where TProp6 : class where TProp7 : class where TProp8 : class where TProp9 : class where TProp10 : class;
        public delegate Task<PotentialFuture<TResult>> WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9, TProp10, TProp11>(TProp1 arg1, TProp2 arg2, TProp3 arg3, TProp4 arg4, TProp5 arg5, TProp6 arg6, TProp7 arg7, TProp8 arg8, TProp9 arg9, TProp10 arg10, TProp11 arg11)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class where TProp6 : class where TProp7 : class where TProp8 : class where TProp9 : class where TProp10 : class where TProp11 : class;
        public delegate Task<PotentialFuture<TResult>> WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9, TProp10, TProp11, TProp12>(TProp1 arg1, TProp2 arg2, TProp3 arg3, TProp4 arg4, TProp5 arg5, TProp6 arg6, TProp7 arg7, TProp8 arg8, TProp9 arg9, TProp10 arg10, TProp11 arg11, TProp12 arg12)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class where TProp6 : class where TProp7 : class where TProp8 : class where TProp9 : class where TProp10 : class where TProp11 : class where TProp12 : class;
        public delegate Task<PotentialFuture<TResult>> WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9, TProp10, TProp11, TProp12, TProp13>(TProp1 arg1, TProp2 arg2, TProp3 arg3, TProp4 arg4, TProp5 arg5, TProp6 arg6, TProp7 arg7, TProp8 arg8, TProp9 arg9, TProp10 arg10, TProp11 arg11, TProp12 arg12, TProp13 arg13)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class where TProp6 : class where TProp7 : class where TProp8 : class where TProp9 : class where TProp10 : class where TProp11 : class where TProp12 : class where TProp13 : class;
        public delegate Task<PotentialFuture<TResult>> WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9, TProp10, TProp11, TProp12, TProp13, TProp14>(TProp1 arg1, TProp2 arg2, TProp3 arg3, TProp4 arg4, TProp5 arg5, TProp6 arg6, TProp7 arg7, TProp8 arg8, TProp9 arg9, TProp10 arg10, TProp11 arg11, TProp12 arg12, TProp13 arg13, TProp14 arg14)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class where TProp6 : class where TProp7 : class where TProp8 : class where TProp9 : class where TProp10 : class where TProp11 : class where TProp12 : class where TProp13 : class where TProp14 : class;
        public delegate Task<PotentialFuture<TResult>> WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9, TProp10, TProp11, TProp12, TProp13, TProp14, TProp15>(TProp1 arg1, TProp2 arg2, TProp3 arg3, TProp4 arg4, TProp5 arg5, TProp6 arg6, TProp7 arg7, TProp8 arg8, TProp9 arg9, TProp10 arg10, TProp11 arg11, TProp12 arg12, TProp13 arg13, TProp14 arg14, TProp15 arg15)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class where TProp6 : class where TProp7 : class where TProp8 : class where TProp9 : class where TProp10 : class where TProp11 : class where TProp12 : class where TProp13 : class where TProp14 : class where TProp15 : class;
        public delegate Task<PotentialFuture<TResult>> WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9, TProp10, TProp11, TProp12, TProp13, TProp14, TProp15, TProp16>(TProp1 arg1, TProp2 arg2, TProp3 arg3, TProp4 arg4, TProp5 arg5, TProp6 arg6, TProp7 arg7, TProp8 arg8, TProp9 arg9, TProp10 arg10, TProp11 arg11, TProp12 arg12, TProp13 arg13, TProp14 arg14, TProp15 arg15, TProp16 arg16)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class where TProp6 : class where TProp7 : class where TProp8 : class where TProp9 : class where TProp10 : class where TProp11 : class where TProp12 : class where TProp13 : class where TProp14 : class where TProp15 : class where TProp16 : class;

       
        public async Task<PotentialFuture<TResult>> WaitForPromises<TResult>(Func<Task<PotentialFuture<TResult>>> f, params IFuture[] wait) where TResult : class
            => await WaitForPromises<TResult>(new FutureCallbackHandler<TResult>(f, wait));

        public async Task<PotentialFuture<TResult>> WaitForPromises<TResult, TProp1>(WaitForPromiseCallback<TResult, TProp1> getResultFunction, IFuture<TProp1> arg1)
            where TResult : class where TProp1 : class => throw new NotImplementedException();
        public async Task<PotentialFuture<TResult>> WaitForPromises<TResult, TProp1, TProp2>(WaitForPromiseCallback<TResult, TProp1, TProp2> getResultFunction, IFuture<TProp1> arg1, IFuture<TProp2> arg2)
            where TResult : class where TProp1 : class where TProp2 : class => throw new NotImplementedException();
        public async Task<PotentialFuture<TResult>> WaitForPromises<TResult, TProp1, TProp2, TProp3>(WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3> getResultFunction, IFuture<TProp1> arg1, IFuture<TProp2> arg2, IFuture<TProp3> arg3)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class => throw new NotImplementedException();
        public async Task<PotentialFuture<TResult>> WaitForPromises<TResult, TProp1, TProp2, TProp3, TProp4>(WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4> getResultFunction, IFuture<TProp1> arg1, IFuture<TProp2> arg2, IFuture<TProp3> arg3, IFuture<TProp4> arg4)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class => throw new NotImplementedException();
        public async Task<PotentialFuture<TResult>> WaitForPromises<TResult, TProp1, TProp2, TProp3, TProp4, TProp5>(WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5> getResultFunction, IFuture<TProp1> arg1, IFuture<TProp2> arg2, IFuture<TProp3> arg3, IFuture<TProp4> arg4, IFuture<TProp5> arg5)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class => throw new NotImplementedException();
        public async Task<PotentialFuture<TResult>> WaitForPromises<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6>(WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6> getResultFunction, IFuture<TProp1> arg1, IFuture<TProp2> arg2, IFuture<TProp3> arg3, IFuture<TProp4> arg4, IFuture<TProp5> arg5, IFuture<TProp6> arg6)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class where TProp6 : class => throw new NotImplementedException();
        public async Task<PotentialFuture<TResult>> WaitForPromises<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7>(WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7> getResultFunction, IFuture<TProp1> arg1, IFuture<TProp2> arg2, IFuture<TProp3> arg3, IFuture<TProp4> arg4, IFuture<TProp5> arg5, IFuture<TProp6> arg6, IFuture<TProp7> arg7)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class where TProp6 : class where TProp7 : class => throw new NotImplementedException();
        public async Task<PotentialFuture<TResult>> WaitForPromises<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8>(WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8> getResultFunction, IFuture<TProp1> arg1, IFuture<TProp2> arg2, IFuture<TProp3> arg3, IFuture<TProp4> arg4, IFuture<TProp5> arg5, IFuture<TProp6> arg6, IFuture<TProp7> arg7, IFuture<TProp8> arg8)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class where TProp6 : class where TProp7 : class where TProp8 : class => throw new NotImplementedException();
        public async Task<PotentialFuture<TResult>> WaitForPromises<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9>(WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9> getResultFunction, IFuture<TProp1> arg1, IFuture<TProp2> arg2, IFuture<TProp3> arg3, IFuture<TProp4> arg4, IFuture<TProp5> arg5, IFuture<TProp6> arg6, IFuture<TProp7> arg7, IFuture<TProp8> arg8, IFuture<TProp9> arg9)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class where TProp6 : class where TProp7 : class where TProp8 : class where TProp9 : class => throw new NotImplementedException();
        public async Task<PotentialFuture<TResult>> WaitForPromises<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9, TProp10>(WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9, TProp10> getResultFunction, IFuture<TProp1> arg1, IFuture<TProp2> arg2, IFuture<TProp3> arg3, IFuture<TProp4> arg4, IFuture<TProp5> arg5, IFuture<TProp6> arg6, IFuture<TProp7> arg7, IFuture<TProp8> arg8, IFuture<TProp9> arg9, IFuture<TProp10> arg10)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class where TProp6 : class where TProp7 : class where TProp8 : class where TProp9 : class where TProp10 : class => throw new NotImplementedException();
        public async Task<PotentialFuture<TResult>> WaitForPromises<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9, TProp10, TProp11>(WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9, TProp10, TProp11> getResultFunction, IFuture<TProp1> arg1, IFuture<TProp2> arg2, IFuture<TProp3> arg3, IFuture<TProp4> arg4, IFuture<TProp5> arg5, IFuture<TProp6> arg6, IFuture<TProp7> arg7, IFuture<TProp8> arg8, IFuture<TProp9> arg9, IFuture<TProp10> arg10, IFuture<TProp11> arg11)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class where TProp6 : class where TProp7 : class where TProp8 : class where TProp9 : class where TProp10 : class where TProp11 : class => throw new NotImplementedException();
        public async Task<PotentialFuture<TResult>> WaitForPromises<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9, TProp10, TProp11, TProp12>(WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9, TProp10, TProp11, TProp12> getResultFunction, IFuture<TProp1> arg1, IFuture<TProp2> arg2, IFuture<TProp3> arg3, IFuture<TProp4> arg4, IFuture<TProp5> arg5, IFuture<TProp6> arg6, IFuture<TProp7> arg7, IFuture<TProp8> arg8, IFuture<TProp9> arg9, IFuture<TProp10> arg10, IFuture<TProp11> arg11, IFuture<TProp12> arg12)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class where TProp6 : class where TProp7 : class where TProp8 : class where TProp9 : class where TProp10 : class where TProp11 : class where TProp12 : class => throw new NotImplementedException();
        public async Task<PotentialFuture<TResult>> WaitForPromises<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9, TProp10, TProp11, TProp12, TProp13>(WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9, TProp10, TProp11, TProp12, TProp13> getResultFunction, IFuture<TProp1> arg1, IFuture<TProp2> arg2, IFuture<TProp3> arg3, IFuture<TProp4> arg4, IFuture<TProp5> arg5, IFuture<TProp6> arg6, IFuture<TProp7> arg7, IFuture<TProp8> arg8, IFuture<TProp9> arg9, IFuture<TProp10> arg10, IFuture<TProp11> arg11, IFuture<TProp12> arg12, IFuture<TProp13> arg13)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class where TProp6 : class where TProp7 : class where TProp8 : class where TProp9 : class where TProp10 : class where TProp11 : class where TProp12 : class where TProp13 : class => throw new NotImplementedException();
        public async Task<PotentialFuture<TResult>> WaitForPromises<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9, TProp10, TProp11, TProp12, TProp13, TProp14>(WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9, TProp10, TProp11, TProp12, TProp13, TProp14> getResultFunction, IFuture<TProp1> arg1, IFuture<TProp2> arg2, IFuture<TProp3> arg3, IFuture<TProp4> arg4, IFuture<TProp5> arg5, IFuture<TProp6> arg6, IFuture<TProp7> arg7, IFuture<TProp8> arg8, IFuture<TProp9> arg9, IFuture<TProp10> arg10, IFuture<TProp11> arg11, IFuture<TProp12> arg12, IFuture<TProp13> arg13, IFuture<TProp14> arg14)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class where TProp6 : class where TProp7 : class where TProp8 : class where TProp9 : class where TProp10 : class where TProp11 : class where TProp12 : class where TProp13 : class where TProp14 : class => throw new NotImplementedException();
        public async Task<PotentialFuture<TResult>> WaitForPromises<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9, TProp10, TProp11, TProp12, TProp13, TProp14, TProp15>(WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9, TProp10, TProp11, TProp12, TProp13, TProp14, TProp15> getResultFunction, IFuture<TProp1> arg1, IFuture<TProp2> arg2, IFuture<TProp3> arg3, IFuture<TProp4> arg4, IFuture<TProp5> arg5, IFuture<TProp6> arg6, IFuture<TProp7> arg7, IFuture<TProp8> arg8, IFuture<TProp9> arg9, IFuture<TProp10> arg10, IFuture<TProp11> arg11, IFuture<TProp12> arg12, IFuture<TProp13> arg13, IFuture<TProp14> arg14, IFuture<TProp15> arg15)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class where TProp6 : class where TProp7 : class where TProp8 : class where TProp9 : class where TProp10 : class where TProp11 : class where TProp12 : class where TProp13 : class where TProp14 : class where TProp15 : class => throw new NotImplementedException();
        public async Task<PotentialFuture<TResult>> WaitForPromises<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9, TProp10, TProp11, TProp12, TProp13, TProp14, TProp15, TProp16>(WaitForPromiseCallback<TResult, TProp1, TProp2, TProp3, TProp4, TProp5, TProp6, TProp7, TProp8, TProp9, TProp10, TProp11, TProp12, TProp13, TProp14, TProp15, TProp16> getResultFunction, IFuture<TProp1> arg1, IFuture<TProp2> arg2, IFuture<TProp3> arg3, IFuture<TProp4> arg4, IFuture<TProp5> arg5, IFuture<TProp6> arg6, IFuture<TProp7> arg7, IFuture<TProp8> arg8, IFuture<TProp9> arg9, IFuture<TProp10> arg10, IFuture<TProp11> arg11, IFuture<TProp12> arg12, IFuture<TProp13> arg13, IFuture<TProp14> arg14, IFuture<TProp15> arg15, IFuture<TProp16> arg16)
            where TResult : class where TProp1 : class where TProp2 : class where TProp3 : class where TProp4 : class where TProp5 : class where TProp6 : class where TProp7 : class where TProp8 : class where TProp9 : class where TProp10 : class where TProp11 : class where TProp12 : class where TProp13 : class where TProp14 : class where TProp15 : class where TProp16 : class => throw new NotImplementedException();

    }
}
